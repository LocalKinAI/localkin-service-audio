[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ollamaaudio"
version = "0.1.0"
description = "Local Speech-to-Text and Text-to-Speech Model Manager"
readme = "ollamaaudio/README.md"
license = {text = "MIT"}
authors = [
    {name = "OllamaAudio Team", email = "info@ollamaaudio.dev"},
]
maintainers = [
    {name = "OllamaAudio Team", email = "info@ollamaaudio.dev"},
]
keywords = [
    "speech-to-text",
    "text-to-speech",
    "stt",
    "tts",
    "whisper",
    "ollama",
    "local-ai",
    "audio-processing",
    "machine-learning",
    "ai",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.25.0",
    "sounddevice>=0.4.0",
    "scipy>=1.7.0",
    "numpy>=1.21.0,<1.25.0",  # Constrain numpy for compatibility
    "openai-whisper==20240930",  # Pin specific version
    "pyttsx3>=2.90",
    "huggingface-hub>=0.17.0",
    "transformers>=4.21.0",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "kokoro>=0.9.2",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",
    "llvmlite>=0.41.0",  # Even newer version for Python 3.10+
    "numba>=0.58.0",     # Compatible numba version
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "mypy>=0.900",
    "pre-commit>=2.15.0",
    "ruff>=0.1.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.15.0",
]
gpu = [
    "torch>=2.0.0",  # With CUDA support
    "torchaudio>=2.0.0",
]

[project.scripts]
ollamaaudio = "ollamaaudio.cli:main"

[project.urls]
Homepage = "https://github.com/ollamaaudio/ollamaaudio"
Documentation = "https://ollamaaudio.readthedocs.io/"
Repository = "https://github.com/ollamaaudio/ollamaaudio"
Issues = "https://github.com/ollamaaudio/ollamaaudio/issues"
Changelog = "https://github.com/ollamaaudio/ollamaaudio/blob/main/CHANGELOG.md"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["ollamaaudio*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
ollamaaudio = ["models.json", "README.md"]

[tool.uv]
dev-dependencies = [
    "pytest>=6.0.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "mypy>=0.900",
    "pre-commit>=2.15.0",
    "ruff>=0.1.0",
]

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["ollamaaudio"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sounddevice.*",
    "pyttsx3.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["ollamaaudio"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
